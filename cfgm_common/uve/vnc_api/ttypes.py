#
# Autogenerated by Sandesh Compiler (1.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style
# Copyright (c) 2013 Juniper Networks, Inc. All rights reserved.
#

from pysandesh.Thrift import TType, TMessageType, TException

from pysandesh.transport import TTransport
from pysandesh.protocol import TBinaryProtocol, TProtocol
try:
  from pysandesh.protocol import fastbinary
except:
  fastbinary = None

import cStringIO
import uuid
import bottle
from pysandesh import sandesh_base
from pysandesh.sandesh_http import SandeshHttp
from pysandesh.sandesh_uve import SandeshUVETypeMaps
from pysandesh.util import UTCTimestampUsec, UTCTimestampUsecToString
from pysandesh.gen_py.sandesh.constants import *



class VncApiCommon(object):
  """
  Attributes:
   - identifier_uuid
   - object_type
   - identifier_name
   - url
   - operation
   - useragent
   - remote_ip
   - params
   - body
   - domain
   - project
   - user
   - error
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'identifier_uuid', None, None, ), # 1
    (2, TType.STRING, 'object_type', None, None, ), # 2
    (3, TType.STRING, 'identifier_name', None, None, ), # 3
    (4, TType.STRING, 'url', None, None, ), # 4
    (5, TType.STRING, 'operation', None, None, ), # 5
    (6, TType.STRING, 'useragent', None, None, ), # 6
    (7, TType.STRING, 'remote_ip', None, None, ), # 7
    (8, TType.STRING, 'params', None, None, ), # 8
    (9, TType.STRING, 'body', None, None, ), # 9
    (10, TType.STRING, 'domain', None, None, ), # 10
    (11, TType.STRING, 'project', None, None, ), # 11
    (12, TType.STRING, 'user', None, None, ), # 12
    (13, TType.STRING, 'error', None, None, ), # 13
  )

  def __init__(self, identifier_uuid=None, object_type=None, identifier_name=None, url=None, operation=None, useragent=None, remote_ip=None, params=None, body=None, domain=None, project=None, user=None, error=None,):
    self.identifier_uuid = identifier_uuid
    self.object_type = object_type
    self.identifier_name = identifier_name
    self.url = url
    self.operation = operation
    self.useragent = useragent
    self.remote_ip = remote_ip
    self.params = params
    self.body = body
    self.domain = domain
    self.project = project
    self.user = user
    self.error = error

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return 0
    read_cnt = 0
    length = iprot.readStructBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.identifier_uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          (length, self.object_type) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          (length, self.identifier_name) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          (length, self.url) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          (length, self.operation) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          (length, self.useragent) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          (length, self.remote_ip) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          (length, self.params) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          (length, self.body) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          (length, self.domain) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          (length, self.project) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          (length, self.user) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          (length, self.error) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readStructEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeStructBegin('VncApiCommon') < 0: return -1
    if self.identifier_uuid is not None:
      annotations = {}
      if oprot.writeFieldBegin('identifier_uuid', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.identifier_uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.object_type is not None:
      annotations = {}
      annotations['key'] = 'ConfigObjectTable'
      if oprot.writeFieldBegin('object_type', TType.STRING, 2, annotations) < 0: return -1
      if oprot.writeString(self.object_type) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.identifier_name is not None:
      annotations = {}
      annotations['key'] = 'ConfigObjectTable'
      if oprot.writeFieldBegin('identifier_name', TType.STRING, 3, annotations) < 0: return -1
      if oprot.writeString(self.identifier_name) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.url is not None:
      annotations = {}
      if oprot.writeFieldBegin('url', TType.STRING, 4, annotations) < 0: return -1
      if oprot.writeString(self.url) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.operation is not None:
      annotations = {}
      if oprot.writeFieldBegin('operation', TType.STRING, 5, annotations) < 0: return -1
      if oprot.writeString(self.operation) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.useragent is not None:
      annotations = {}
      if oprot.writeFieldBegin('useragent', TType.STRING, 6, annotations) < 0: return -1
      if oprot.writeString(self.useragent) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.remote_ip is not None:
      annotations = {}
      if oprot.writeFieldBegin('remote_ip', TType.STRING, 7, annotations) < 0: return -1
      if oprot.writeString(self.remote_ip) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.params is not None:
      annotations = {}
      if oprot.writeFieldBegin('params', TType.STRING, 8, annotations) < 0: return -1
      if oprot.writeString(self.params) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.body is not None:
      annotations = {}
      if oprot.writeFieldBegin('body', TType.STRING, 9, annotations) < 0: return -1
      if oprot.writeString(self.body) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.domain is not None:
      annotations = {}
      annotations['key'] = 'ConfigObjectTableByUser'
      if oprot.writeFieldBegin('domain', TType.STRING, 10, annotations) < 0: return -1
      if oprot.writeString(self.domain) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.project is not None:
      annotations = {}
      annotations['key'] = 'ConfigObjectTableByUser'
      if oprot.writeFieldBegin('project', TType.STRING, 11, annotations) < 0: return -1
      if oprot.writeString(self.project) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.user is not None:
      annotations = {}
      annotations['key'] = 'ConfigObjectTableByUser'
      if oprot.writeFieldBegin('user', TType.STRING, 12, annotations) < 0: return -1
      if oprot.writeString(self.user) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.error is not None:
      annotations = {}
      if oprot.writeFieldBegin('error', TType.STRING, 13, annotations) < 0: return -1
      if oprot.writeString(self.error) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeStructEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def log(self):
    log_str = cStringIO.StringIO()
    if self.identifier_uuid is not None:
      log_str.write('identifier_uuid = ')
      log_str.write(self.identifier_uuid)
      log_str.write('  ')
    if self.object_type is not None:
      log_str.write('object_type = ')
      log_str.write(self.object_type)
      log_str.write('  ')
    if self.identifier_name is not None:
      log_str.write('identifier_name = ')
      log_str.write(self.identifier_name)
      log_str.write('  ')
    if self.url is not None:
      log_str.write('url = ')
      log_str.write(self.url)
      log_str.write('  ')
    if self.operation is not None:
      log_str.write('operation = ')
      log_str.write(self.operation)
      log_str.write('  ')
    if self.useragent is not None:
      log_str.write('useragent = ')
      log_str.write(self.useragent)
      log_str.write('  ')
    if self.remote_ip is not None:
      log_str.write('remote_ip = ')
      log_str.write(self.remote_ip)
      log_str.write('  ')
    if self.params is not None:
      log_str.write('params = ')
      log_str.write(self.params)
      log_str.write('  ')
    if self.body is not None:
      log_str.write('body = ')
      log_str.write(self.body)
      log_str.write('  ')
    if self.domain is not None:
      log_str.write('domain = ')
      log_str.write(self.domain)
      log_str.write('  ')
    if self.project is not None:
      log_str.write('project = ')
      log_str.write(self.project)
      log_str.write('  ')
    if self.user is not None:
      log_str.write('user = ')
      log_str.write(self.user)
      log_str.write('  ')
    if self.error is not None:
      log_str.write('error = ')
      log_str.write(self.error)
      log_str.write('  ')
    return log_str.getvalue()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class VncApiReadLog(sandesh_base.SandeshTrace):

  thrift_spec = None

  def __init__(self, api_log=None, file=None, line=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshTrace.__init__(self, type=SandeshType.TRACE_OBJECT)
    self.api_log = api_log
    self.file = file
    self.line = line
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 103727244
    self._hints = 0 | SANDESH_KEY_HINT

  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write('VncApiReadLog: ')                                                                                                                                                                         
    if self.api_log is not None:
      log_str.write('api_log = ')
      log_str.write('<<  ')
      log_str.write(self.api_log.log())
      log_str.write('>>')
      log_str.write('  ')
    if self.file is not None:
      log_str.write('file = ')
      log_str.write(self.file)
      log_str.write('  ')
    if self.line is not None:
      log_str.write('line = ')
      log_str.write(str(self.line))
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.api_log = VncApiCommon()
          read_cnt += self.api_log.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == -32768:
        if ftype == TType.STRING:
          (length, self.file) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == -32767:
        if ftype == TType.I32:
          (length, self.line) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin('VncApiReadLog') < 0: return -1
    if self.file is not None:
      annotations = {}
      if oprot.writeFieldBegin('file', TType.STRING, -32768, annotations) < 0: return -1
      if oprot.writeString(self.file) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.line is not None:
      annotations = {}
      if oprot.writeFieldBegin('line', TType.I32, -32767, annotations) < 0: return -1
      if oprot.writeI32(self.line) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.api_log is not None:
      annotations = {}
      if oprot.writeFieldBegin('api_log', TType.STRUCT, 1, annotations) < 0: return -1
      if self.api_log.write(oprot) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.file != other.file:
      return False
    if self.line != other.line:
      return False
    if self.api_log != other.api_log:
      return False
    return True

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class VncApiConfigLog(sandesh_base.SandeshObject):

  thrift_spec = None

  def __init__(self, api_log=None, file=None, line=None, category='__default__', level=SandeshLevel.SYS_INFO, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshObject.__init__(self)
    self.api_log = api_log
    self.file = file
    self.line = line
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 103727244
    self._hints = 0 | SANDESH_KEY_HINT
    self._category = category
    self._level = level

  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    if self._category is not None:
      log_str.write(self._category)
    log_str.write(' [')
    log_str.write(SandeshLevel._VALUES_TO_NAMES[self._level])
    log_str.write(']: ')
    log_str.write('VncApiConfigLog: ')                                                                                                                                                                         
    if self.api_log is not None:
      log_str.write('api_log = ')
      log_str.write('<<  ')
      log_str.write(self.api_log.log())
      log_str.write('>>')
      log_str.write('  ')
    if self.file is not None:
      log_str.write('file = ')
      log_str.write(self.file)
      log_str.write('  ')
    if self.line is not None:
      log_str.write('line = ')
      log_str.write(str(self.line))
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.api_log = VncApiCommon()
          read_cnt += self.api_log.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == -32768:
        if ftype == TType.STRING:
          (length, self.file) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == -32767:
        if ftype == TType.I32:
          (length, self.line) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin('VncApiConfigLog') < 0: return -1
    if self.file is not None:
      annotations = {}
      if oprot.writeFieldBegin('file', TType.STRING, -32768, annotations) < 0: return -1
      if oprot.writeString(self.file) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.line is not None:
      annotations = {}
      if oprot.writeFieldBegin('line', TType.I32, -32767, annotations) < 0: return -1
      if oprot.writeI32(self.line) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.api_log is not None:
      annotations = {}
      if oprot.writeFieldBegin('api_log', TType.STRUCT, 1, annotations) < 0: return -1
      if self.api_log.write(oprot) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.file != other.file:
      return False
    if self.line != other.line:
      return False
    if self.api_log != other.api_log:
      return False
    return True

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class VncApiError(sandesh_base.SandeshSystem):

  thrift_spec = None

  def __init__(self, api_error_msg=None, file=None, line=None, category='__default__', level=SandeshLevel.SYS_INFO, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshSystem.__init__(self)
    self.api_error_msg = api_error_msg
    self.file = file
    self.line = line
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 2183673535
    self._hints = 0
    self._category = category
    self._level = level

  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    if self._category is not None:
      log_str.write(self._category)
    log_str.write(' [')
    log_str.write(SandeshLevel._VALUES_TO_NAMES[self._level])
    log_str.write(']: ')
    log_str.write('VncApiError: ')                                                                                                                                                                         
    if self.api_error_msg is not None:
      log_str.write(self.api_error_msg)
      log_str.write('  ')
    if self.file is not None:
      log_str.write(self.file)
      log_str.write('  ')
    if self.line is not None:
      log_str.write(str(self.line))
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.api_error_msg) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == -32768:
        if ftype == TType.STRING:
          (length, self.file) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == -32767:
        if ftype == TType.I32:
          (length, self.line) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin('VncApiError') < 0: return -1
    if self.file is not None:
      annotations = {}
      if oprot.writeFieldBegin('file', TType.STRING, -32768, annotations) < 0: return -1
      if oprot.writeString(self.file) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.line is not None:
      annotations = {}
      if oprot.writeFieldBegin('line', TType.I32, -32767, annotations) < 0: return -1
      if oprot.writeI32(self.line) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.api_error_msg is not None:
      annotations = {}
      if oprot.writeFieldBegin('api_error_msg', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.api_error_msg) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.file != other.file:
      return False
    if self.line != other.line:
      return False
    if self.api_error_msg != other.api_error_msg:
      return False
    return True

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)


_SANDESH_REQUEST_LIST = [
]


_SANDESH_UVE_LIST = [
]


_SANDESH_UVE_DATA_LIST = [
]


_SANDESH_ALARM_LIST = [
]


_SANDESH_ALARM_DATA_LIST = [
]
